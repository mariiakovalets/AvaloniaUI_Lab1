//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TableExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TableExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, NUMBER=17, 
		CELL_REF=18, WS=19;
	public const int
		RULE_formula = 0, RULE_expression = 1, RULE_arithmeticExpr = 2, RULE_comparisonExpr = 3;
	public static readonly string[] ruleNames = {
		"formula", "expression", "arithmeticExpr", "comparisonExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "' mod '", "' div '", 
		"'inc'", "'dec'", "'<='", "'>='", "'<>'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NUMBER", "CELL_REF", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TableExpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TableExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TableExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TableExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TableExpressionParser.Eof, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 0, RULE_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			Match(T__0);
			State = 9;
			Match(T__1);
			State = 10;
			expression();
			State = 11;
			Match(T__2);
			State = 12;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExprContext comparisonExpr() {
			return GetRuleContext<ComparisonExprContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr() {
			return GetRuleContext<ArithmeticExprContext>(0);
		}
		public ArithmeticExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 16;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new ArithmeticExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14;
				arithmeticExpr(0);
				}
				break;
			case 2:
				_localctx = new ComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				comparisonExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExprContext : ParserRuleContext {
		public ArithmeticExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpr; } }
	 
		public ArithmeticExprContext() { }
		public virtual void CopyFrom(ArithmeticExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ModDivContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public ModDivContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr() {
			return GetRuleContext<ArithmeticExprContext>(0);
		}
		public DecContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TableExpressionParser.NUMBER, 0); }
		public NumberContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public AddSubContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public MulDivContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenArithmeticContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr() {
			return GetRuleContext<ArithmeticExprContext>(0);
		}
		public ParenArithmeticContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CellReferenceContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL_REF() { return GetToken(TableExpressionParser.CELL_REF, 0); }
		public CellReferenceContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncContext : ArithmeticExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr() {
			return GetRuleContext<ArithmeticExprContext>(0);
		}
		public IncContext(ArithmeticExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExprContext arithmeticExpr() {
		return arithmeticExpr(0);
	}

	private ArithmeticExprContext arithmeticExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExprContext _localctx = new ArithmeticExprContext(Context, _parentState);
		ArithmeticExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_arithmeticExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				{
				_localctx = new IncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 19;
				Match(T__9);
				State = 20;
				Match(T__1);
				State = 21;
				arithmeticExpr(0);
				State = 22;
				Match(T__2);
				}
				break;
			case T__10:
				{
				_localctx = new DecContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				Match(T__10);
				State = 25;
				Match(T__1);
				State = 26;
				arithmeticExpr(0);
				State = 27;
				Match(T__2);
				}
				break;
			case T__1:
				{
				_localctx = new ParenArithmeticContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29;
				Match(T__1);
				State = 30;
				arithmeticExpr(0);
				State = 31;
				Match(T__2);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 33;
				Match(NUMBER);
				}
				break;
			case CELL_REF:
				{
				_localctx = new CellReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 34;
				Match(CELL_REF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 48;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 46;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new AddSubContext(new ArithmeticExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpr);
						State = 37;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 38;
						_la = TokenStream.LA(1);
						if ( !(_la==T__3 || _la==T__4) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 39;
						arithmeticExpr(9);
						}
						break;
					case 2:
						{
						_localctx = new MulDivContext(new ArithmeticExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpr);
						State = 40;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 41;
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==T__6) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 42;
						arithmeticExpr(8);
						}
						break;
					case 3:
						{
						_localctx = new ModDivContext(new ArithmeticExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpr);
						State = 43;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 44;
						_la = TokenStream.LA(1);
						if ( !(_la==T__7 || _la==T__8) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 45;
						arithmeticExpr(7);
						}
						break;
					}
					} 
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExprContext : ParserRuleContext {
		public ComparisonExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpr; } }
	 
		public ComparisonExprContext() { }
		public virtual void CopyFrom(ComparisonExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOrEqualContext : ComparisonExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public LessOrEqualContext(ComparisonExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : ComparisonExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public LessThanContext(ComparisonExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualContext : ComparisonExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public NotEqualContext(ComparisonExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualContext : ComparisonExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public EqualContext(ComparisonExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : ComparisonExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public GreaterThanContext(ComparisonExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOrEqualContext : ComparisonExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext[] arithmeticExpr() {
			return GetRuleContexts<ArithmeticExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExprContext arithmeticExpr(int i) {
			return GetRuleContext<ArithmeticExprContext>(i);
		}
		public GreaterOrEqualContext(ComparisonExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITableExpressionVisitor<TResult> typedVisitor = visitor as ITableExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExprContext comparisonExpr() {
		ComparisonExprContext _localctx = new ComparisonExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_comparisonExpr);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new LessOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				arithmeticExpr(0);
				State = 52;
				Match(T__11);
				State = 53;
				arithmeticExpr(0);
				}
				break;
			case 2:
				_localctx = new GreaterOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				arithmeticExpr(0);
				State = 56;
				Match(T__12);
				State = 57;
				arithmeticExpr(0);
				}
				break;
			case 3:
				_localctx = new NotEqualContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				arithmeticExpr(0);
				State = 60;
				Match(T__13);
				State = 61;
				arithmeticExpr(0);
				}
				break;
			case 4:
				_localctx = new EqualContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 63;
				arithmeticExpr(0);
				State = 64;
				Match(T__0);
				State = 65;
				arithmeticExpr(0);
				}
				break;
			case 5:
				_localctx = new LessThanContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				arithmeticExpr(0);
				State = 68;
				Match(T__14);
				State = 69;
				arithmeticExpr(0);
				}
				break;
			case 6:
				_localctx = new GreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 71;
				arithmeticExpr(0);
				State = 72;
				Match(T__15);
				State = 73;
				arithmeticExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return arithmeticExpr_sempred((ArithmeticExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmeticExpr_sempred(ArithmeticExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,19,78,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
		1,1,3,1,17,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,36,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,47,8,2,
		10,2,12,2,50,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,76,8,3,1,3,0,1,4,4,0,2,4,
		6,0,3,1,0,4,5,1,0,6,7,1,0,8,9,86,0,8,1,0,0,0,2,16,1,0,0,0,4,35,1,0,0,0,
		6,75,1,0,0,0,8,9,5,1,0,0,9,10,5,2,0,0,10,11,3,2,1,0,11,12,5,3,0,0,12,13,
		5,0,0,1,13,1,1,0,0,0,14,17,3,4,2,0,15,17,3,6,3,0,16,14,1,0,0,0,16,15,1,
		0,0,0,17,3,1,0,0,0,18,19,6,2,-1,0,19,20,5,10,0,0,20,21,5,2,0,0,21,22,3,
		4,2,0,22,23,5,3,0,0,23,36,1,0,0,0,24,25,5,11,0,0,25,26,5,2,0,0,26,27,3,
		4,2,0,27,28,5,3,0,0,28,36,1,0,0,0,29,30,5,2,0,0,30,31,3,4,2,0,31,32,5,
		3,0,0,32,36,1,0,0,0,33,36,5,17,0,0,34,36,5,18,0,0,35,18,1,0,0,0,35,24,
		1,0,0,0,35,29,1,0,0,0,35,33,1,0,0,0,35,34,1,0,0,0,36,48,1,0,0,0,37,38,
		10,8,0,0,38,39,7,0,0,0,39,47,3,4,2,9,40,41,10,7,0,0,41,42,7,1,0,0,42,47,
		3,4,2,8,43,44,10,6,0,0,44,45,7,2,0,0,45,47,3,4,2,7,46,37,1,0,0,0,46,40,
		1,0,0,0,46,43,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,5,1,
		0,0,0,50,48,1,0,0,0,51,52,3,4,2,0,52,53,5,12,0,0,53,54,3,4,2,0,54,76,1,
		0,0,0,55,56,3,4,2,0,56,57,5,13,0,0,57,58,3,4,2,0,58,76,1,0,0,0,59,60,3,
		4,2,0,60,61,5,14,0,0,61,62,3,4,2,0,62,76,1,0,0,0,63,64,3,4,2,0,64,65,5,
		1,0,0,65,66,3,4,2,0,66,76,1,0,0,0,67,68,3,4,2,0,68,69,5,15,0,0,69,70,3,
		4,2,0,70,76,1,0,0,0,71,72,3,4,2,0,72,73,5,16,0,0,73,74,3,4,2,0,74,76,1,
		0,0,0,75,51,1,0,0,0,75,55,1,0,0,0,75,59,1,0,0,0,75,63,1,0,0,0,75,67,1,
		0,0,0,75,71,1,0,0,0,76,7,1,0,0,0,5,16,35,46,48,75
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TableExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="TableExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ITableExpressionVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="TableExpressionParser.formula"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormula([NotNull] TableExpressionParser.FormulaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="TableExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticExpression([NotNull] TableExpressionParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ComparisonExpression</c>
	/// labeled alternative in <see cref="TableExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonExpression([NotNull] TableExpressionParser.ComparisonExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ModDiv</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModDiv([NotNull] TableExpressionParser.ModDivContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Dec</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDec([NotNull] TableExpressionParser.DecContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] TableExpressionParser.NumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSub([NotNull] TableExpressionParser.AddSubContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDiv([NotNull] TableExpressionParser.MulDivContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenArithmetic</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenArithmetic([NotNull] TableExpressionParser.ParenArithmeticContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CellReference</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCellReference([NotNull] TableExpressionParser.CellReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Inc</c>
	/// labeled alternative in <see cref="TableExpressionParser.arithmeticExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInc([NotNull] TableExpressionParser.IncContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LessOrEqual</c>
	/// labeled alternative in <see cref="TableExpressionParser.comparisonExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessOrEqual([NotNull] TableExpressionParser.LessOrEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterOrEqual</c>
	/// labeled alternative in <see cref="TableExpressionParser.comparisonExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterOrEqual([NotNull] TableExpressionParser.GreaterOrEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotEqual</c>
	/// labeled alternative in <see cref="TableExpressionParser.comparisonExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotEqual([NotNull] TableExpressionParser.NotEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Equal</c>
	/// labeled alternative in <see cref="TableExpressionParser.comparisonExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqual([NotNull] TableExpressionParser.EqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LessThan</c>
	/// labeled alternative in <see cref="TableExpressionParser.comparisonExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessThan([NotNull] TableExpressionParser.LessThanContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterThan</c>
	/// labeled alternative in <see cref="TableExpressionParser.comparisonExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThan([NotNull] TableExpressionParser.GreaterThanContext context);
}
